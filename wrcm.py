import tkinter as tk
from tkinter import messagebox, simpledialog, Toplevel, Listbox, Frame, Label, Button, Entry, Canvas
import configparser
import requests
import socket
import threading
import netifaces
import os
import queue
import subprocess
import platform
import argparse
import signal
import base64
import io  # Required for in-memory image data
from PIL import Image, ImageTk, UnidentifiedImageError
from bs4 import BeautifulSoup
from screeninfo import get_monitors

# --- Configuration ---
CONFIG_FILE = 'config.ini'
ICONS_DIR = 'icons'
DEFAULT_ON_ICON = 'Onled.png'
DEFAULT_OFF_ICON = 'Offled.png'
STANDARD_ICON_SIZE = (256, 256)
FACTORY_NETWORK_PREFIX = '192.168.1.'
FACTORY_COMMAND_PATH = '30000'
BROWSER_HEADER = {'User-Agent': 'Mozilla/5.0'}
TRACEROUTE_TARGETS = ['8.8.8.8', '1.1.1.1', '208.67.222.222', '9.9.9.9']
SPLASH_DURATION = 3000 # Duration of the splash screen in milliseconds (e.g., 3000 = 3
SPLASH_MAX_SIZE = (400, 400) 
# Splash screen image
IMAGE_DATA = """

"""

# --- All Text and Translations (with final additions) ---
LANGUAGES = {
    'en': {
        'app_title':"Relay Control Panel",'menu_find_devices':"Find Devices",'menu_config':"Configure",
        'scan_factory':"Scan for New Factory Devices ({})",'add_manual':"Add Module Manually...",
        'manage_existing':"Manage Existing Modules...",'view_module':"View Module",'language':"Language",
        'restart_required':"Language changed to {}. Please restart the application.",'offline_text':"OFFLINE",
        'find_module_button':"Find Module on Network...",'refresh_status':"Refresh Status",
        'no_modules_configured':"No modules configured.",'ip_label_prefix':"IP:",'finder_title':"Find Lost Module",
        'manage_title':"Manage Existing Modules",'manual_add_title':"Add Module Manually",'edit_module_title':"Edit Module",
        'config_module_title':"Configure Module at {}",'finder_step1':"Step 1: Searching for device...",
        'finder_step2':"Step 2: Found device at {}. Interrogating...",'finder_tier1':"Tier 1: Trying likely paths...",
        'finder_tier2':"Tier 2: Trying common ranges (1-1024)...",'finder_manual_fallback':"Found device at {}, but couldn't find path.",
        'finder_manual_prompt':"Enter path manually:",'finder_test_path':"Test Path",'finder_confirm_title':"Update Configuration",
        'finder_confirm_msg':"Module Found!\n\nNew IP: {} (Old: {})\nNew Path: {} (Old: {})\n\nUpdate config?",
        'error':"Error",'success':"Success",'confirm_removal':"Confirm Removal",'confirm_removal_msg':"Are you sure?",
        'network_mismatch':"Network Mismatch",'network_mismatch_msg':"Your computer must be on the {}x network.",
        'already_configured':"Module with IP {} is already configured.",'verification_failed':"Could not find a valid module at {} using path '{}'.",
        'no_new_modules':"No new unconfigured modules were found.",'found_multiple_new':"Found {} new modules. Configuring the first one.",
        'module_offline':"Module is offline.",'input_error':"All fields must be filled out.",'module_name':"Module Name",
        'module_function':"Module Function",'relay_label':"Relay {} Label",'command_path':"Command Path",'save':"Save",
        'configured_modules':"Configured Modules",'edit':"Edit",'change_ip':"Change Network Config",'remove':"Remove",
        'change_net_prompt_ip':"New IP Address:",'change_net_prompt_path':"New Command Path:",'change_net_title':"Change Network Configuration",
        'network_unreachable_title':"Network Unreachable",'network_unreachable_msg':"The new network ({}) is not reachable. Operation cancelled.",
        'verification_failed_after_change':"Command sent, but module did not appear at new address {}. A re-scan may be required.",
        'icons_missing_title':"Startup Error",'icons_missing_msg':f"Default icons '{DEFAULT_ON_ICON}' and '{DEFAULT_OFF_ICON}' not found in '{ICONS_DIR}' folder. Application cannot start.",
        'icon_picker_title': "Select an Icon", 'set_on_icon': "ON Icon...", 'set_off_icon': "OFF Icon...",
        'on_icon_label': "ON Icon:", 'off_icon_label': "OFF Icon:", 'none_selected': "Default", 'menu_exit': "Exit"
    },
    'pt': {
        'app_title':"Painel de Controlo de Relés", 'menu_find_devices':"Procurar Dispositivos", 'menu_config':"Configurar",
        'scan_factory':"Procurar Novos Dispositivos ({})", 'add_manual':"Adicionar Módulo Manualmente...",
        'manage_existing':"Gerir Módulos Existentes...", 'view_module':"Ver Módulo", 'language':"Idioma",
        'restart_required':"Idioma alterado para {}. Por favor, reinicie a aplicação.", 'offline_text':"DESCONECTADO",
        'find_module_button':"Encontrar Módulo...", 'refresh_status':"Atualizar",
        'no_modules_configured':"Nenhum módulo configurado.", 'ip_label_prefix':"IP:", 'finder_title':"Procurar Módulo Perdido",
        'manage_title':"Gerir Módulos Existentes", 'manual_add_title':"Adicionar Módulo Manualmente", 'edit_module_title':"Editar Módulo",
        'config_module_title':"Configurar Módulo em {}", 'finder_step1':"Passo 1: A procurar o dispositivo...",
        'finder_step2':"Passo 2: Dispositivo encontrado em {}. A interrogar...", 'finder_tier1':"Nível 1: A tentar caminhos prováveis...",
        'finder_tier2':"Nível 2: A tentar portas comuns (1-1024)...", 'finder_manual_fallback':"Dispositivo encontrado em {}, mas não foi possível encontrar o caminho.",
        'finder_manual_prompt':"Introduza o caminho manualmente:", 'finder_test_path':"Testar Caminho", 'finder_confirm_title':"Atualizar Configuração",
        'finder_confirm_msg':"Módulo Encontrado!\n\nNovo IP: {} (Antigo: {})\nNovo Caminho: {} (Antigo: {})\n\nAtualizar configuração?",
        'error':"Erro", 'success':"Sucesso", 'confirm_removal':"Confirmar Remoção", 'confirm_removal_msg':"Tem a certeza?",
        'network_mismatch':"Incompatibilidade de Rede", 'network_mismatch_msg':"O seu computador deve estar na rede {}x.",
        'already_configured':"O módulo com o IP {} já está configurado.", 'verification_failed':"Não foi possível encontrar um módulo válido em {} usando o caminho '{}'.",
        'no_new_modules':"Não foram encontrados novos módulos por configurar.", 'found_multiple_new':"Foram encontrados {} novos módulos. A configurar o primeiro.",
        'module_offline':"O módulo está offline.", 'input_error':"Todos os campos devem ser preenchidos.", 'module_name':"Nome do Módulo",
        'module_function':"Função do Módulo", 'relay_label':"Nome do Relé {}", 'command_path':"Caminho do Comando", 'save':"Guardar",
        'configured_modules':"Módulos Configurados", 'edit':"Editar", 'change_ip':"Mudar Config. de Rede", 'remove':"Remover",
        'change_net_prompt_ip':"Novo Endereço IP:", 'change_net_prompt_path':"Novo Caminho do Comando:", 'change_net_title':"Mudar Configuração de Rede",
        'network_unreachable_title':"Rede Inalcançável", 'network_unreachable_msg':"A nova rede ({}) não é alcançável. Operação cancelada.",
        'verification_failed_after_change':"Comando enviado, mas o módulo não apareceu no novo endereço {}. Pode ser necessário procurar novamente.",
        'icons_missing_title':"Erro de Arranque", 'icons_missing_msg':f"Ícones padrão '{DEFAULT_ON_ICON}' e '{DEFAULT_OFF_ICON}' não encontrados na pasta '{ICONS_DIR}'. A aplicação não pode iniciar.",
        'icon_picker_title': "Selecionar um Ícone", 'set_on_icon': "Ícone ON...", 'set_off_icon': "Ícone OFF...",
        'on_icon_label': "Ícone ON:", 'off_icon_label': "Ícone OFF:", 'none_selected': "Padrão", 'menu_exit': "Sair"
    },
}

class SplashScreen(Toplevel):
    def __init__(self, parent):
        Toplevel.__init__(self, parent)
        self.overrideredirect(True)

        image_bytes = base64.b64decode(IMAGE_DATA)
        image_file = io.BytesIO(image_bytes)
        pil_image = Image.open(image_file)
        
        pil_image.thumbnail(SPLASH_MAX_SIZE, Image.Resampling.LANCZOS)
        self.image = ImageTk.PhotoImage(pil_image)

        Label(self, image=self.image).pack()

        primary_monitor = None
        for m in get_monitors():
            if m.is_primary:
                primary_monitor = m
                break
        if not primary_monitor and get_monitors():
            primary_monitor = get_monitors()[0]

        img_width = self.image.width()
        img_height = self.image.height()

        if primary_monitor:
            mon_x, mon_y = primary_monitor.x, primary_monitor.y
            mon_width, mon_height = primary_monitor.width, primary_monitor.height
            x = mon_x + (mon_width // 2) - (img_width // 2)
            y = mon_y + (mon_height // 2) - (img_height // 2)
        else:
            screen_width = self.winfo_screenwidth()
            screen_height = self.winfo_screenheight()
            x = (screen_width // 2) - (img_width // 2)
            y = (screen_height // 2) - (img_height // 2)
            
        self.geometry(f'{img_width}x{img_height}+{x}+{y}')

class IconManager:
    # This class remains unchanged
    def __init__(self, directory=ICONS_DIR, standard_size=STANDARD_ICON_SIZE):
        self.directory = directory
        self.standard_size = standard_size

    def sanitize(self):
        os.makedirs(self.directory, exist_ok=True)
        for filename in os.listdir(self.directory):
            original_path = os.path.join(self.directory, filename)
            if not os.path.isfile(original_path):
                continue

            try:
                with Image.open(original_path) as img:
                    image_changed = False
                    if img.size != self.standard_size:
                        img = img.resize(self.standard_size, Image.Resampling.LANCZOS)
                        image_changed = True

                    if img.format != 'PNG':
                        base, _ = os.path.splitext(filename)
                        new_path = os.path.join(self.directory, f"{base}.png")
                        img.save(new_path, 'PNG')
                        if original_path.lower() != new_path.lower():
                            os.remove(original_path)
                    elif image_changed:
                        img.save(original_path, 'PNG')

            except (UnidentifiedImageError, IOError):
                print(f"Skipping non-image file: {filename}")
                continue

class LanguageManager:
    # This class remains unchanged
    def __init__(self, language_code='en'):
        self.lang_code = language_code if language_code in LANGUAGES else 'en'
    def get_string(self, key, *args):
        text = LANGUAGES[self.lang_code].get(key, LANGUAGES['en'].get(key, f"<{key}>"))
        return text.format(*args) if args else text

class RelayController:
    # This class remains unchanged
    def __init__(self):
        self.current_network_prefix = None
        self.detect_network_prefix()
        self.config = configparser.ConfigParser()
        if os.path.exists(CONFIG_FILE): self.config.read(CONFIG_FILE)
        else: self.config['General'] = {}; self.save_config()
    def detect_network_prefix(self):
        try:
            gws = netifaces.gateways()
            self.current_network_prefix = '.'.join(gws['default'][netifaces.AF_INET][0].split('.')[:3]) + '.'
        except Exception: self.current_network_prefix = None
    def _parse_status_from_response(self, html_text, ip):
        try:
            soup = BeautifulSoup(html_text.replace(ip, ""), 'html.parser')
            messy_string = soup.find_all('a')[1].string.strip() if len(soup.find_all('a')) > 1 else html_text.strip()
            return "".join(filter(str.isdigit, messy_string.split('.')[0].split('&')[0]))
        except Exception: return None
    def save_config(self):
        with open(CONFIG_FILE, 'w') as f: self.config.write(f)
    def scan_and_verify_factory(self, result_queue):
        found_ips = []
        for i in range(2, 255):
            ip = f"{FACTORY_NETWORK_PREFIX}{i}"
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.05)
            if sock.connect_ex((ip, 80)) == 0 and self.verify_single_device(ip, FACTORY_COMMAND_PATH): found_ips.append(ip)
            sock.close()
        result_queue.put(found_ips)
    def verify_single_device(self, ip, command_path):
        try:
            r = requests.get(f"http://{ip}/{command_path}/99", timeout=5, headers=BROWSER_HEADER)
            return r.status_code == 200 and self._parse_status_from_response(r.text, ip) is not None
        except requests.RequestException: return False
    def get_module_details(self, ip, command_path):
        try:
            r = requests.get(f"http://{ip}/{command_path}/99", timeout=5, headers=BROWSER_HEADER)
            if r.status_code == 200:
                s = self._parse_status_from_response(r.text, ip)
                if s: return len(s), s
        except requests.RequestException: return None, None
        return None, None
    def get_traceroute_hops(self):
        system = platform.system()
        for target in TRACEROUTE_TARGETS:
            try:
                command = ["tracert", "-d", "-w", "1000", target] if system == "Windows" else ["traceroute", "-n", "-w", "1", "-q", "1", target]
                result = subprocess.run(command, capture_output=True, text=True, timeout=15, check=False)
                if result.returncode == 0 and result.stdout: return result.stdout
            except (subprocess.TimeoutExpired, FileNotFoundError): continue
        return None
    def change_module_network_config(self, ip, command_path, new_ip, new_path):
        try:
            r = requests.post(f"http://{ip}/{command_path}/login", data={'UserName': new_ip, 'PassWord': new_path}, timeout=5, headers=BROWSER_HEADER)
            return "Sucess" in r.text
        except requests.RequestException: return False
    def send_relay_command(self, ip, command_path, relay_number, state):
        if not (1 <= relay_number <= 16): return False
        code = (relay_number - 1) * 2 + (1 if state.lower() == 'on' else 0)
        try:
            r = requests.get(f"http://{ip}/{command_path}/{code:02d}", timeout=5, headers=BROWSER_HEADER)
            return r.status_code == 200
        except requests.RequestException: return False
    def find_lost_module_ip(self, result_queue):
        if not self.current_network_prefix:
            result_queue.put(None); return
        for i in range(2, 255):
            ip = f"{self.current_network_prefix}{i}"
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM); sock.settimeout(0.05)
                if sock.connect_ex((ip, 80)) != 0: sock.close(); continue
                sock.close()
                r = requests.get(f"http://{ip}/", timeout=1, headers=BROWSER_HEADER)
                if "<p>Address: http://" in r.text: result_queue.put(ip); return
            except requests.RequestException: continue
        result_queue.put(None)

class App(tk.Tk):
    # This class remains unchanged
    def __init__(self, start_fullscreen=False):
        super().__init__()
        self.is_fullscreen = start_fullscreen

        self.config_for_lang = configparser.ConfigParser()
        if os.path.exists(CONFIG_FILE): self.config_for_lang.read(CONFIG_FILE)
        self.lang = LanguageManager(self.config_for_lang.get('General', 'language', fallback='en'))
        self.title(self.lang.get_string('app_title'))
        IconManager().sanitize()
        if not (os.path.exists(os.path.join(ICONS_DIR, DEFAULT_ON_ICON)) and os.path.exists(os.path.join(ICONS_DIR, DEFAULT_OFF_ICON))):
            messagebox.showerror(self.lang.get_string('icons_missing_title'), self.lang.get_string('icons_missing_msg'))
            self.after(100, self.destroy)
            return

        if self.is_fullscreen:
            primary_monitor = None
            for m in get_monitors():
                if m.is_primary:
                    primary_monitor = m
                    break
            if not primary_monitor and get_monitors():
                primary_monitor = get_monitors()[0]

            if primary_monitor:
                self.geometry(f"{primary_monitor.width}x{primary_monitor.height}+{primary_monitor.x}+{primary_monitor.y}")
            self.attributes('-fullscreen', True)
        else:
            self.geometry("800x600")
        
        self.config(bg='gray20')

        self.photo_image_cache = {}
        self._resize_job = None
        self.controller = RelayController()
        self.scan_queue = queue.Queue()
        self.current_module_section, self.relay_widgets = None, {}

        self.main_frame = Frame(self, bg='gray30')
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        self.module_info_frame = Frame(self.main_frame, bg='gray30')
        self.module_info_frame.pack(fill=tk.X, pady=5)
        self.relays_frame = Frame(self.main_frame, bg='gray30')
        self.relays_frame.pack(fill=tk.BOTH, expand=True)
        self.ip_label = Label(self, text="IP: N/A", bg='gray20', fg='white')
        self.ip_label.pack(side=tk.BOTTOM, fill=tk.X)

        if not self.is_fullscreen:
            self.create_menu()

        self.bind('<Escape>', self.exit_fullscreen)
        self.relays_frame.bind('<Configure>', self.on_resize)
        self.after(100, self.load_first_module)

    def exit_fullscreen(self, event=None):
        if self.is_fullscreen:
            self.is_fullscreen = False
            self.attributes('-fullscreen', False)
            self.create_menu()

    def create_menu(self):
        menubar = tk.Menu(self)
        self.config(menu=menubar)
        device_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label=self.lang.get_string('menu_find_devices'), menu=device_menu)
        device_menu.add_command(label=self.lang.get_string('scan_factory', FACTORY_NETWORK_PREFIX), command=self.start_factory_scan)
        
        config_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label=self.lang.get_string('menu_config'), menu=config_menu)
        config_menu.add_command(label=self.lang.get_string('add_manual'), command=self.add_module_by_ip)
        config_menu.add_separator()
        config_menu.add_command(label=self.lang.get_string('manage_existing'), command=self.open_manage_window)
        
        self.view_menu = tk.Menu(config_menu, tearoff=0)
        config_menu.add_cascade(label=self.lang.get_string('view_module'), menu=self.view_menu)
        
        lang_menu = tk.Menu(config_menu, tearoff=0)
        config_menu.add_separator()
        config_menu.add_cascade(label=self.lang.get_string('language'), menu=lang_menu)
        for code, name in [('en', "English"), ('pt', "Português"), ('es', "Español"), ('fr', "Français"), ('de', "Deutsch"), ('it', "Italiano"), ('zh_CN', "中文")]:
            lang_menu.add_command(label=name, command=lambda c=code, n=name: self.change_language(c, n))
        
        config_menu.add_separator()
        config_menu.add_command(label=self.lang.get_string('menu_exit'), command=self.destroy)
        
        self.update_view_menu()
    
    # ... The rest of the App class and all other helper classes remain unchanged ...
    def on_resize(self, event):
        if self._resize_job:
            self.after_cancel(self._resize_job)
        self._resize_job = self.after(250, self.redraw_all_relays_for_resize)

    def _calculate_optimal_icon_size(self):
        if not self.relay_widgets:
            return None

        first_widget_frame = next(iter(self.relay_widgets.values()))['frame']
        w, h = first_widget_frame.winfo_width(), first_widget_frame.winfo_height()

        if w < 20 or h < 20:
            return None

        available_height = h - 35
        if available_height < 16: available_height = 16

        side = int(min(w, available_height) * 0.40)
        return (side, side) if side > 16 else (16, 16)

    def redraw_all_relays_for_resize(self):
        if not self.current_module_section or not self.relay_widgets:
            return

        new_size = self._calculate_optimal_icon_size()

        if new_size is None:
            self.after(50, self.redraw_all_relays_for_resize)
            return

        c = self.controller.config
        ip = c.get(self.current_module_section, 'ip')
        path = c.get(self.current_module_section, 'command_path')
        _, status = self.controller.get_module_details(ip, path)

        if status:
            for i, char in enumerate(status):
                relay_num = i + 1
                if relay_num in self.relay_widgets:
                    self._update_single_relay_icon(relay_num, char, new_size)

    def _get_or_create_icon(self, filename, size):
        cache_key = (filename, size)
        if cache_key in self.photo_image_cache:
            return self.photo_image_cache[cache_key]

        try:
            path = os.path.join(ICONS_DIR, filename)
            with Image.open(path) as img:
                resized_img = img.resize(size, Image.Resampling.LANCZOS)
                photo_image = ImageTk.PhotoImage(resized_img)
                self.photo_image_cache[cache_key] = photo_image
                return photo_image
        except (FileNotFoundError, UnidentifiedImageError):
            print(f"Icon file not found or invalid, will use fallback: {filename}")
            return None

    def _update_single_relay_icon(self, relay_num, state_char, size):
        c = self.controller.config
        state = 'on' if state_char == '1' else 'off'
        
        icon_filename = c.get(self.current_module_section, f'relay_{relay_num}_icon_{state}', fallback=None)
        if not icon_filename:
            icon_filename = DEFAULT_ON_ICON if state == 'on' else DEFAULT_OFF_ICON

        photo = self._get_or_create_icon(icon_filename, size)
        
        widget_dict = self.relay_widgets[relay_num]
        icon_lbl = widget_dict['icon_label']
        fallback_canvas = widget_dict['fallback_canvas']

        if photo:
            fallback_canvas.pack_forget()
            icon_lbl.config(image=photo)
            icon_lbl.image = photo
            icon_lbl.pack(pady=(5, 10), expand=True)
        else:
            icon_lbl.pack_forget()
            color = "green" if state == 'on' else "red"
            fallback_canvas.delete("all")
            fallback_canvas.create_oval(2, 2, size[0]-2, size[1]-2, fill=color, outline='black')
            fallback_canvas.config(width=size[0], height=size[1])
            fallback_canvas.pack(pady=(5, 10), expand=True)

    def change_language(self, lang_code, lang_name):
        if not self.config_for_lang.has_section('General'): self.config_for_lang.add_section('General')
        self.config_for_lang.set('General', 'language', lang_code)
        with open(CONFIG_FILE, 'w') as f: self.config_for_lang.write(f)
        messagebox.showinfo(self.lang.get_string('language'), self.lang.get_string('restart_required', lang_name))

    def start_factory_scan(self):
        if self.controller.current_network_prefix != FACTORY_NETWORK_PREFIX:
            messagebox.showwarning(self.lang.get_string('network_mismatch'), self.lang.get_string('network_mismatch_msg', FACTORY_NETWORK_PREFIX))
            return
        self.scan_progress_window = Toplevel(self)
        self.scan_progress_window.title("Scanning")
        Label(self.scan_progress_window, text=f"Scanning {FACTORY_NETWORK_PREFIX}x...").pack(padx=20, pady=20)
        scan_thread = threading.Thread(target=self.controller.scan_and_verify_factory, args=(self.scan_queue,), daemon=True)
        scan_thread.start()
        self.after(100, self.check_scan_queue)

    def add_module_by_ip(self):
        dialog = ManualAddDialog(self, self.lang, self.lang.get_string('manual_add_title'))
        self.wait_window(dialog)
        if dialog.result:
            ip, path = dialog.result
            if self.is_ip_configured(ip):
                messagebox.showinfo(self.lang.get_string('success'), self.lang.get_string('already_configured', ip))
                return
            if self.controller.verify_single_device(ip, path): self.configure_new_device(ip, path)
            else: messagebox.showerror(self.lang.get_string('error'), self.lang.get_string('verification_failed', ip, path))

    def check_scan_queue(self):
        try:
            found_ips = self.scan_queue.get_nowait()
            self.on_scan_complete(found_ips)
        except queue.Empty: self.after(100, self.check_scan_queue)

    def on_scan_complete(self, found_ips):
        self.scan_progress_window.destroy()
        newly_found_ips = [ip for ip in found_ips if not self.is_ip_configured(ip)]
        if not newly_found_ips:
            messagebox.showinfo("Scan Complete", self.lang.get_string('no_new_modules'))
            return
        if len(newly_found_ips) > 1: messagebox.showinfo("Scan Complete", self.lang.get_string('found_multiple_new', len(newly_found_ips)))
        self.configure_new_device(newly_found_ips[0], FACTORY_COMMAND_PATH)

    def is_ip_configured(self, ip):
        for section in self.controller.config.sections():
            if self.controller.config.has_option(section, 'ip') and self.controller.config.get(section, 'ip') == ip: return True
        return False

    def configure_new_device(self, ip, command_path):
        num, status = self.controller.get_module_details(ip, command_path)
        if num is None:
            messagebox.showerror(self.lang.get_string('error'), self.lang.get_string('module_offline'))
            return
        dialog = ModuleEditDialog(self, self.lang, self.lang.get_string('config_module_title', ip), ip=ip, num_relays=num, initial_status=status, command_path=command_path)
        self.wait_window(dialog)
        self.update_view_menu(), self.load_first_module()

    def open_manage_window(self):
        ManageModulesWindow(self, self.lang)

    def update_view_menu(self):
        self.view_menu.delete(0, 'end')
        for section in [s for s in self.controller.config.sections() if s != 'General']:
            name = self.controller.config.get(section, 'name', fallback=section)
            self.view_menu.add_command(label=name, command=lambda s=section: self.draw_module_display(s))

    def load_first_module(self):
        sections = [s for s in self.controller.config.sections() if s != 'General']
        if sections: self.draw_module_display(sections[0])
        else:
            self.clear_main_frame()
            Label(self.main_frame, text=self.lang.get_string('no_modules_configured'), bg='gray30', fg='white', font=("Helvetica", 14)).pack(pady=50)

    def clear_main_frame(self):
        self.current_module_section, self.relay_widgets = None, {}
        for widget in self.module_info_frame.winfo_children(): widget.destroy()
        for widget in self.relays_frame.winfo_children(): widget.destroy()
        # --- THIS IS THE FIX ---
        for widget in self.main_frame.winfo_children():
            if widget not in (self.module_info_frame, self.relays_frame):
                widget.destroy()

    def draw_module_display(self, module_section):
        self.clear_main_frame()
        self.current_module_section = module_section
        c = self.controller.config
        name = c.get(module_section, 'name', fallback=module_section)
        func = c.get(module_section, 'function', fallback='N/A')
        ip = c.get(module_section, 'ip', fallback='N/A')
        num = c.getint(module_section, 'num_relays', fallback=0)
        path = c.get(module_section, 'command_path', fallback=FACTORY_COMMAND_PATH)

        Label(self.module_info_frame, text=name, bg='gray30', fg='cyan', font=("Helvetica", 16, "bold")).pack(side=tk.LEFT, padx=10)
        Label(self.module_info_frame, text=func, bg='gray30', fg='white', font=("Helvetica", 14)).pack(side=tk.LEFT, padx=10)
        Button(self.module_info_frame, text=self.lang.get_string('refresh_status'), command=self.refresh_current_module_status).pack(side=tk.RIGHT, padx=10)
        self.ip_label.config(text=f"{self.lang.get_string('ip_label_prefix')} {ip}")

        _, status = self.controller.get_module_details(ip, path)
        if status is None:
            self.relays_frame.grid_rowconfigure(0, weight=1)
            self.relays_frame.grid_columnconfigure(0, weight=1)
            Label(self.relays_frame, text=self.lang.get_string('offline_text'), bg='gray30', fg='red', font=("Helvetica", 24, "bold")).grid(row=0, column=0, pady=20)
            Button(self.relays_frame, text=self.lang.get_string('find_module_button'), command=self.find_lost_module).grid(row=1, column=0, pady=10)
        else:
            for i in range(num):
                rn, r, col = i + 1, i // 4, i % 4
                frame = Frame(self.relays_frame, bg='gray40', relief=tk.RIDGE, borderwidth=2, cursor="hand2")
                frame.grid(row=r, column=col, padx=10, pady=10, sticky="nsew")
                self.relays_frame.grid_columnconfigure(col, weight=1)
                self.relays_frame.grid_rowconfigure(r, weight=1)

                lbl_text = c.get(module_section, f'relay_{rn}_label', fallback=f'Relay {rn}')
                lbl = Label(frame, text=lbl_text, bg='gray40', fg='white', font=("Helvetica", 12, "bold"), cursor="hand2")
                lbl.pack(pady=(10, 5))

                icon_lbl = Label(frame, bg='gray40', cursor="hand2")
                fallback_canvas = Canvas(frame, bg='gray40', cursor="hand2", highlightthickness=0)
                
                for widget in [frame, lbl, icon_lbl, fallback_canvas]:
                    widget.bind("<ButtonPress-1>", lambda e, f=frame: self.on_press(f))
                    widget.bind("<ButtonRelease-1>", lambda e, f=frame, n=rn: self.on_release(f, n))
                
                self.relay_widgets[rn] = {'frame': frame, 'icon_label': icon_lbl, 'fallback_canvas': fallback_canvas}
            
            self.after(10, self.redraw_all_relays_for_resize)

    def on_press(self, frame):
        frame.config(bg='gray25')
        for child in frame.winfo_children(): child.config(bg='gray25')

    def on_release(self, frame, num):
        frame.config(bg='gray40')
        for child in frame.winfo_children(): child.config(bg='gray40')
        self.toggle_relay(num)

    def refresh_current_module_status(self):
        if self.current_module_section:
            self.draw_module_display(self.current_module_section)

    def _update_indicators_only(self):
        if not self.current_module_section or not self.relay_widgets: return
        
        current_size = self._calculate_optimal_icon_size()
        if current_size is None: return

        c = self.controller.config
        ip = c.get(self.current_module_section, 'ip')
        path = c.get(self.current_module_section, 'command_path')
        _, status = self.controller.get_module_details(ip, path)

        if status is None:
            self.draw_module_display(self.current_module_section)
            return
        
        for i, char in enumerate(status):
            relay_num = i + 1
            if relay_num in self.relay_widgets:
                self._update_single_relay_icon(relay_num, char, current_size)

    def toggle_relay(self, num):
        if not self.current_module_section: return
        c = self.controller.config
        ip, path = c.get(self.current_module_section, 'ip'), c.get(self.current_module_section, 'command_path')
        threading.Thread(target=self._send_toggle_command, args=(ip, path, num), daemon=True).start()

    def _send_toggle_command(self, ip, path, num):
        _, status = self.controller.get_module_details(ip, path)
        if status is None:
            self.after(0, lambda: messagebox.showerror(self.lang.get_string('error'), self.lang.get_string('module_offline')))
            self.after(0, lambda: self.draw_module_display(self.current_module_section))
            return
            
        new_state = 'off' if status[num - 1] == '1' else 'on'
        success = self.controller.send_relay_command(ip, path, num, new_state)
        
        if success:
            self.after(250, self._update_indicators_only)
        else:
            self.after(0, lambda: messagebox.showerror(self.lang.get_string('error'), self.lang.get_string('module_offline')))
            self.after(0, lambda: self.draw_module_display(self.current_module_section))

    def find_lost_module(self):
        if not self.current_module_section: return
        c = self.controller.config
        old_ip, old_path = c.get(self.current_module_section, 'ip'), c.get(self.current_module_section, 'command_path')
        FinderWindow(self, self.lang, self.controller, self.current_module_section, old_ip, old_path)

class IconPickerDialog(Toplevel):
    # This class remains unchanged
    def __init__(self, parent, lang):
        super().__init__(parent)
        self.transient(parent)
        self.grab_set()
        self.title(lang.get_string('icon_picker_title'))
        self.result = None
        self.photo_images = []

        canvas_frame = Frame(self)
        canvas_frame.pack(fill=tk.BOTH, expand=True)
        
        canvas = Canvas(canvas_frame)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.bind('<MouseWheel>', lambda e: canvas.yview_scroll(int(-1*(e.delta/120)), "units"))
        self.bind('<Button-4>', lambda e: canvas.yview_scroll(-1, "units"))
        self.bind('<Button-5>', lambda e: canvas.yview_scroll(1, "units"))

        icon_files = sorted([f for f in os.listdir(ICONS_DIR) if f.lower().endswith('.png')])
        
        cols = 4
        for i, filename in enumerate(icon_files):
            try:
                row, col = divmod(i, cols)
                btn_frame = Frame(scrollable_frame, relief=tk.GROOVE, borderwidth=1)
                btn_frame.grid(row=row, column=col, padx=5, pady=5)

                img = Image.open(os.path.join(ICONS_DIR, filename))
                img.thumbnail((64, 64), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                self.photo_images.append(photo)

                button = Button(btn_frame, image=photo, command=lambda f=filename: self.select_icon(f))
                button.pack(padx=5, pady=5)
                
                label = Label(btn_frame, text=filename, wraplength=70)
                label.pack(padx=5, pady=(0,5))
            except Exception as e:
                print(f"Could not load icon for picker: {filename}, Error: {e}")

    def select_icon(self, filename):
        self.result = filename
        self.destroy()

class FinderWindow(Toplevel):
    # This class remains unchanged
    def __init__(self, parent, lang, controller, section, old_ip, old_path):
        super().__init__(parent)
        self.transient(parent), self.grab_set(), self.title(lang.get_string('finder_title'))
        self.parent, self.lang, self.controller, self.section, self.old_ip, self.old_path = parent, lang, controller, section, old_ip, old_path
        self.found_ip, self.was_successful = None, False
        self.search_queue = queue.Queue()
        self.status_label = Label(self, text=lang.get_string('finder_step1'))
        self.status_label.pack(padx=20, pady=10)
        self.after(100, self.start_ip_search)
    def start_ip_search(self):
        threading.Thread(target=self.controller.find_lost_module_ip, args=(self.search_queue,), daemon=True).start()
        self.after(100, self.check_ip_search_queue)
    def check_ip_search_queue(self):
        try:
            result_ip = self.search_queue.get_nowait()
            if result_ip:
                self.found_ip = result_ip
                self.start_path_interrogation()
            else: messagebox.showerror("Not Found", "Device not found.", parent=self), self.destroy()
        except queue.Empty: self.after(100, self.check_ip_search_queue)
    def start_path_interrogation(self):
        self.status_label.config(text=self.lang.get_string('finder_step2', self.found_ip))
        threading.Thread(target=self.run_tiered_search, daemon=True).start()
    def run_tiered_search(self):
        self.update_status_async(self.lang.get_string('finder_tier1'))
        for path in set([self.old_path, FACTORY_COMMAND_PATH, '80']):
            if self.controller.verify_single_device(self.found_ip, path): self.found_path_success(path); return
        self.update_status_async(self.lang.get_string('finder_tier2'))
        for port in range(1, 1025):
            if self.controller.verify_single_device(self.found_ip, str(port)): self.found_path_success(str(port)); return
        self.after(100, self.create_manual_fallback_ui)
    def update_status_async(self, message):
        self.after(0, lambda: self.status_label.config(text=message))
    def found_path_success(self, found_path):
        self.after(0, lambda: self.confirm_and_update(found_path))
    def confirm_and_update(self, found_path):
        msg = self.lang.get_string('finder_confirm_msg', self.found_ip, self.old_ip, found_path, self.old_path)
        if messagebox.askyesno(self.lang.get_string('finder_confirm_title'), msg, parent=self):
            c = self.controller.config
            c.set(self.section, 'ip', self.found_ip), c.set(self.section, 'command_path', found_path)
            self.controller.save_config()
            self.was_successful = True
            self.parent.refresh_current_module_status()
        self.destroy()
    def create_manual_fallback_ui(self):
        for widget in self.winfo_children(): widget.destroy()
        Label(self, text=self.lang.get_string('finder_manual_fallback', self.found_ip)).pack(pady=5)
        Label(self, text=self.lang.get_string('finder_manual_prompt')).pack()
        self.manual_entry = Entry(self)
        self.manual_entry.pack(pady=5)
        Button(self, text=self.lang.get_string('finder_test_path'), command=self.test_manual_path).pack()
    def test_manual_path(self):
        path = self.manual_entry.get().strip()
        if path and self.controller.verify_single_device(self.found_ip, path): self.found_path_success(path)
        else: messagebox.showerror("Failed", "Path did not work.", parent=self)

class ManageModulesWindow(Toplevel):
    def __init__(self, parent, lang):
        super().__init__(parent)
        self.transient(parent), self.grab_set(), self.title(lang.get_string('manage_title'))
        self.parent, self.lang, self.controller = parent, lang, parent.controller
        Label(self, text=lang.get_string('configured_modules')).pack(pady=5)
        self.configured_list = Listbox(self, width=50)
        self.configured_list.pack(fill=tk.BOTH, expand=True, padx=10)
        btn_frame = Frame(self)
        btn_frame.pack(pady=10)
        Button(btn_frame, text=lang.get_string('edit'), command=self.edit_device).pack(side=tk.LEFT, padx=5)
        Button(btn_frame, text=lang.get_string('change_ip'), command=self.change_network_config).pack(side=tk.LEFT, padx=5)
        Button(btn_frame, text=lang.get_string('remove'), command=self.remove_device).pack(side=tk.LEFT, padx=5)
        self.populate_list()
    def populate_list(self):
        self.configured_list.delete(0, 'end')
        for section in [s for s in self.controller.config.sections() if s != 'General']:
            self.configured_list.insert('end', f"{self.controller.config.get(section, 'name', fallback=section)} ({self.controller.config.get(section, 'ip', fallback='N/A')})")
    def get_selected_section(self):
        if not (sel := self.configured_list.curselection()): return None
        txt = self.configured_list.get(sel[0])
        for section in self.controller.config.sections():
            if f"{self.controller.config.get(section, 'name', fallback=section)} ({self.controller.config.get(section, 'ip', fallback='N/A')})" == txt: return section
        return None
    def edit_device(self):
        if section := self.get_selected_section():
            dialog = ModuleEditDialog(self, self.lang, self.lang.get_string('edit_module_title'), module_section=section)
            self.wait_window(dialog)
            self.populate_list()
            self.parent.update_view_menu()
            if self.parent.current_module_section == section:
                self.parent.draw_module_display(section)
    def remove_device(self):
        if (section := self.get_selected_section()) and messagebox.askyesno(self.lang.get_string('confirm_removal'), self.lang.get_string('confirm_removal_msg'), parent=self):
            self.controller.config.remove_section(section)
            self.controller.save_config()
            self.populate_list(), self.parent.update_view_menu(), self.parent.load_first_module()
    def change_network_config(self):
        if not (section := self.get_selected_section()): return
        c = self.controller.config
        ip, path = c.get(section, 'ip'), c.get(section, 'command_path', fallback=FACTORY_COMMAND_PATH)
        dialog = ChangeNetDialog(self, self.lang, ip, path)
        self.wait_window(dialog)
        if dialog.result:
            new_ip, new_path = dialog.result
            new_subnet = '.'.join(new_ip.split('.')[:3]) + '.'
            if new_subnet != self.controller.current_network_prefix:
                hops = self.controller.get_traceroute_hops()
                if not (hops and any(new_subnet in line for line in hops.splitlines())):
                    messagebox.showwarning(self.lang.get_string('network_unreachable_title'), self.lang.get_string('network_unreachable_msg', new_subnet), parent=self)
                    return
            if self.controller.change_module_network_config(ip, path, new_ip, new_path):
                self.after(5000, lambda: self.verify_after_change(section, new_ip, new_path))
            else: messagebox.showerror(self.lang.get_string('error'), "Failed to send command.", parent=self)
    def verify_after_change(self, section, new_ip, new_path):
        if self.controller.verify_single_device(new_ip, new_path):
            c = self.controller.config
            c.set(section, 'ip', new_ip), c.set(section, 'command_path', new_path)
            self.controller.save_config()
            messagebox.showinfo(self.lang.get_string('success'), f"Module moved to {new_ip}.", parent=self)
            self.populate_list(), self.parent.update_view_menu(), self.parent.draw_module_display(section)
        else: messagebox.showerror(self.lang.get_string('error'), self.lang.get_string('verification_failed_after_change', new_ip), parent=self)

class ChangeNetDialog(Toplevel):
    def __init__(self, parent, lang, current_ip, current_path):
        super().__init__(parent)
        self.transient(parent), self.grab_set(), self.title(lang.get_string('change_net_title'))
        self.result = None
        Label(self, text=lang.get_string('change_net_prompt_ip')).grid(row=0, column=0, padx=10, pady=5, sticky='w')
        self.ip_entry = Entry(self, width=30)
        self.ip_entry.grid(row=0, column=1, padx=10, pady=5), self.ip_entry.insert(0, current_ip)
        Label(self, text=lang.get_string('change_net_prompt_path')).grid(row=1, column=0, padx=10, pady=5, sticky='w')
        self.path_entry = Entry(self, width=30)
        self.path_entry.grid(row=1, column=1, padx=10, pady=5), self.path_entry.insert(0, current_path)
        btn_frame = Frame(self)
        btn_frame.grid(row=2, columnspan=2, pady=10)
        Button(btn_frame, text="OK", command=self.on_ok, width=10).pack(side=tk.LEFT, padx=5)
        Button(btn_frame, text="Cancel", command=self.destroy, width=10).pack(side=tk.LEFT, padx=5)
        self.bind("<Return>", self.on_ok)
    def on_ok(self, event=None):
        ip, path = self.ip_entry.get().strip(), self.path_entry.get().strip()
        if not ip or not path: messagebox.showwarning("Input Error", "All fields required.", parent=self)
        else: self.result = (ip, path); self.destroy()

class ManualAddDialog(Toplevel):
    def __init__(self, parent, lang, title):
        super().__init__(parent)
        self.transient(parent), self.grab_set(), self.title(title)
        self.result = None
        Label(self, text=f"{lang.get_string('ip_label_prefix')}:").grid(row=0, column=0, padx=10, pady=5, sticky='w')
        self.ip_entry = Entry(self, width=30)
        self.ip_entry.grid(row=0, column=1, padx=10, pady=5)
        Label(self, text=f"{lang.get_string('command_path')}:").grid(row=1, column=0, padx=10, pady=5, sticky='w')
        self.path_entry = Entry(self, width=30)
        self.path_entry.grid(row=1, column=1, padx=10, pady=5), self.path_entry.insert(0, FACTORY_COMMAND_PATH)
        btn_frame = Frame(self)
        btn_frame.grid(row=2, columnspan=2, pady=10)
        Button(btn_frame, text="OK", command=self.on_ok, width=10).pack(side=tk.LEFT, padx=5)
        Button(btn_frame, text="Cancel", command=self.destroy, width=10).pack(side=tk.LEFT, padx=5)
        self.ip_entry.focus_set(), self.bind("<Return>", self.on_ok)
    def on_ok(self, event=None):
        ip, path = self.ip_entry.get().strip(), self.path_entry.get().strip()
        if not ip or not path: messagebox.showwarning("Input Error", "Both fields required.", parent=self)
        else: self.result = (ip, path); self.destroy()

class ModuleEditDialog(Toplevel):
    # This class remains unchanged
    def __init__(self, parent, lang, title, ip=None, num_relays=0, initial_status='', command_path=FACTORY_COMMAND_PATH, module_section=None):
        super().__init__(parent)
        self.transient(parent), self.grab_set(), self.title(title)
        self.lang = lang
        self.controller = parent.controller if hasattr(parent, 'controller') else parent.parent.controller
        self.ip, self.num, self.status, self.path, self.section = ip, num_relays, initial_status, command_path, module_section
        
        self.entries = {}
        self.icon_labels = {}
        self.icon_filenames = {}

        if module_section:
            c = self.controller.config
            self.ip, self.num, self.path = c.get(self.section, 'ip'), c.getint(self.section, 'num_relays'), c.get(self.section, 'command_path', fallback=FACTORY_COMMAND_PATH)

        main_frame = Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True)
        canvas = Canvas(main_frame)
        scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        self.bind_all("<MouseWheel>", _on_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        Label(scrollable_frame, text=f"{lang.get_string('command_path')}:").grid(row=0, column=0, sticky='w', pady=2, padx=5)
        Label(scrollable_frame, text=self.path, fg='blue').grid(row=0, column=1, columnspan=3, sticky='w', padx=5)
        self.entries['name'] = self._create_entry(scrollable_frame, lang.get_string('module_name'), 1, 3)
        self.entries['function'] = self._create_entry(scrollable_frame, lang.get_string('module_function'), 2, 3)

        for i in range(self.num):
            rn = i + 1
            current_row = i * 4 + 3
            
            self.entries[f'relay_{rn}_label'] = self._create_entry(scrollable_frame, lang.get_string('relay_label', rn), current_row, 3)
            
            Button(scrollable_frame, text=lang.get_string('set_on_icon'), width=15, command=lambda r=rn: self.pick_icon(r, 'on')).grid(row=current_row + 1, column=0, sticky='w', padx=5)
            Label(scrollable_frame, text=lang.get_string('on_icon_label')).grid(row=current_row + 1, column=1, sticky='e')
            self.icon_labels[f'{rn}_on'] = Label(scrollable_frame, text=lang.get_string('none_selected'), fg='gray50', width=20, anchor='w')
            self.icon_labels[f'{rn}_on'].grid(row=current_row + 1, column=2, columnspan=2, sticky='w', padx=5)

            Button(scrollable_frame, text=lang.get_string('set_off_icon'), width=15, command=lambda r=rn: self.pick_icon(r, 'off')).grid(row=current_row + 2, column=0, sticky='w', padx=5)
            Label(scrollable_frame, text=lang.get_string('off_icon_label')).grid(row=current_row + 2, column=1, sticky='e')
            self.icon_labels[f'{rn}_off'] = Label(scrollable_frame, text=lang.get_string('none_selected'), fg='gray50', width=20, anchor='w')
            self.icon_labels[f'{rn}_off'].grid(row=current_row + 2, column=2, columnspan=2, sticky='w', padx=5)
            
            if i < self.num - 1:
                Frame(scrollable_frame, height=1, bg='gray80').grid(row=current_row + 3, column=0, columnspan=4, sticky='ew', pady=10, padx=5)

        if module_section:
            self.load_existing_data()
        
        Button(self, text=lang.get_string('save'), command=self.save).pack(pady=10)
        self.bind("<Destroy>", lambda e: self.unbind_all("<MouseWheel>"))

    def _create_entry(self, parent, text, row, columnspan):
        Label(parent, text=text).grid(row=row, column=0, sticky='w', pady=2, padx=5)
        entry = Entry(parent, width=50)
        entry.grid(row=row, column=1, columnspan=columnspan, sticky='ew', padx=5)
        return entry

    def pick_icon(self, relay_num, state):
        dialog = IconPickerDialog(self, self.lang)
        self.wait_window(dialog)
        if dialog.result:
            key = f'{relay_num}_{state}'
            self.icon_filenames[key] = dialog.result
            self.icon_labels[key].config(text=dialog.result, fg='black')

    def load_existing_data(self):
        c = self.controller.config
        self.entries['name'].insert(0, c.get(self.section, 'name', fallback=''))
        self.entries['function'].insert(0, c.get(self.section, 'function', fallback=''))
        for i in range(self.num):
            rn = i + 1
            self.entries[f'relay_{rn}_label'].insert(0, c.get(self.section, f'relay_{rn}_label', fallback=''))
            
            for state in ['on', 'off']:
                key = f'{rn}_{state}'
                icon_file = c.get(self.section, f'relay_{rn}_icon_{state}', fallback=None)
                if icon_file:
                    self.icon_filenames[key] = icon_file
                    self.icon_labels[key].config(text=icon_file, fg='black')

    def save(self):
        section = self.section or f"Module_{self.ip.replace('.', '_')}"
        if not self.controller.config.has_section(section): self.controller.config.add_section(section)
        
        c = self.controller.config
        c.set(section, 'ip', self.ip)
        c.set(section, 'num_relays', str(self.num))
        c.set(section, 'initial_status', self.status)
        c.set(section, 'command_path', self.path)

        for key, entry in self.entries.items():
            c.set(section, key, entry.get())
        
        for key, filename in self.icon_filenames.items():
            relay_num, state = key.split('_')
            config_key = f'relay_{relay_num}_icon_{state}'
            c.set(section, config_key, filename)

        self.controller.save_config()
        self.destroy()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A control panel for network relay modules.")
    parser.add_argument("-f", "--fullscreen", action="store_true", help="Start in borderless fullscreen mode.")
    args = parser.parse_args()
    
    if IMAGE_DATA.strip():
        splash_root = tk.Tk()
        splash_root.withdraw()
        splash = SplashScreen(splash_root)

        def start_main_app():
            splash.destroy()
            splash_root.destroy()
            
            app = App(start_fullscreen=args.fullscreen)
            
            def graceful_shutdown(signum, frame):
                app.destroy()

            signal.signal(signal.SIGINT, graceful_shutdown)
            signal.signal(signal.SIGTERM, graceful_shutdown)

            app.mainloop()

        splash_root.after(SPLASH_DURATION, start_main_app)
        splash_root.mainloop()
    else:
        app = App(start_fullscreen=args.fullscreen)
        
        def graceful_shutdown(signum, frame):
            app.destroy()

        signal.signal(signal.SIGINT, graceful_shutdown)
        signal.signal(signal.SIGTERM, graceful_shutdown)
        
        app.mainloop()
